#!/usr/bin/env python
# coding: utf-8

import requests
import json
import datetime
import re
import configparser
from colorama import Fore, Style
import click
from time import sleep
import os
import sys
import pathlib
import logging
import structlog
from structlog.stdlib import LoggerFactory
from textwrap import TextWrapper
import calendar

# Easier/Pretty logging
structlog.configure(logger_factory=LoggerFactory())
log = structlog.get_logger()
debug = log.debug
info = log.info
error = log.error


def slow_print(buf):
    for c in buf:
        print(c, end='', flush=True)
        sleep(.05)
    sleep(.5)
    print()

def load_data(config_filename=None, location=None):
    """Load data from file or from the web."""

    # Get the config from file
    if config_filename is None:
        config_filename = os.environ['HOME'] + "/.weatherrc"
    if not pathlib.Path(config_filename).exists():
        error("No config file found.  Please add config or run with -g to "
              "generate")
        sys.exit(1)
    debug(f"loading config from {config_filename}")

    config = configparser.ConfigParser()
    config.read(config_filename)
    default_config = config['default']

    if 'local' in config:
        local = default_config['local']
    else:
        local = "no"

    if local == "yes":
        debug("Running locally")

        with open("tmp.json") as fd:
            data = fd.read()
        data = json.loads(data)

    else:
        debug("Running over http")

        if 'cachefile' in default_config:
            cachefile = pathlib.Path(default_config['cachefile'])
        else:
            cachefile = pathlib.Path(os.environ['HOME'] + '/.weather_cache')

        debug('checking cachefile')

        if not cachefile.exists():
            mtime = 0
        else:
            mtime = cachefile.stat().st_mtime

        now = datetime.datetime.now().timestamp()
        last_update = now - mtime
        debug(f"Cache file last updated {last_update:0.0f} s ago")

        # Update the cache file every 10 min
        # TODO: error checking
        api_key = default_config['api_key']
        if location is None:
            latitude = default_config['latitude']
            longitude = default_config['longitude']
        else:
            latitude = config[location]['latitude']
            longitude = config[location]['longitude']

        url = (f'https://api.darksky.net/forecast/{api_key}/'
               f'{latitude},{longitude}')

        if last_update > 60*10:
            debug("Cache file is out of date or does not exist... Updating!")


            req = requests.get(url)
            data = json.loads(req.content.decode())

            with open(cachefile, 'w') as fd:
                fd.write(json.dumps(data))

        else:
            debug("Using cache file")
            with open(cachefile) as fd:
                data = fd.read()
                data = json.loads(data)
            if latitude == str(data['latitude']) and str(longitude) == str(data['longitude']):
                debug("Same Location")
            else:
                debug("New Location: Updating Cache")
                req = requests.get(url)
                data = json.loads(req.content.decode())

                with open(cachefile, 'w') as fd:
                    fd.write(json.dumps(data))

    return data


def print_hourly(data, extended=False):
    """Print out the hourly forecast for the next 24 hours."""

    if extended is True:
        debug("Using Extended Output")

    header_color = Fore.WHITE

    header = ("\u2502 Time  \u2502"
              " Summary                   \u2502"
              " Temp    \u2502"
              " Winds                    \u2502"
              " Precip \u2502")

    # header_border = "=" * len(header)
    # header_border = "\u2550" * len(header)

    top_border = "\u250c"
    top_border += "\u2500" * 7 + "\u252c"
    top_border += "\u2500" * 27 + "\u252c"
    top_border += "\u2500" * 9 + "\u252c"
    top_border += "\u2500" * 26 + "\u252c"
    top_border += "\u2500" * 8
    top_border += "\u2510"

    header_border = "\u255e"
    header_border += "\u2550" * 7 + "\u256a"
    header_border += "\u2550" * 27 + "\u256a"
    header_border += "\u2550" * 9 + "\u256a"
    header_border += "\u2550" * 26 + "\u256a"
    header_border += "\u2550" * 8
    header_border += "\u2561"

    middle_border = "\u251c"
    middle_border += "\u2500" * 7 + "\u253c"
    middle_border += "\u2500" * 27 + "\u253c"
    middle_border += "\u2500" * 9 + "\u253c"
    middle_border += "\u2500" * 26 + "\u253c"
    middle_border += "\u2500" * 8
    middle_border += "\u2524"

    footer_border = "\u2514"
    footer_border += "\u2500" * 7 + "\u2534"
    footer_border += "\u2500" * 27 + "\u2534"
    footer_border += "\u2500" * 9 + "\u2534"
    footer_border += "\u2500" * 26 + "\u2534"
    footer_border += "\u2500" * 8
    footer_border += "\u2518"
    # border = "\u2015" * len(header)
    # footer_border = "-" * len(header)
    # footer_border = "\u2015" * len(header)

    print(header_color, end='')
    print(top_border)
    print(header)
    print(header_border)

    # This is so we can find the start of a new day and print a divider
    newday = re.compile("00:00:00")

    i = 0
    for hour in data['hourly']['data']:

        # Only print 24-hours-ish
        if i > 24 and extended is False:
            break

        i += 1

        time = datetime.datetime.fromtimestamp(hour['time'])
        time_out = time.strftime("%H:%M")
        summary = hour['summary']
        temperature = hour['temperature']
        windspeed = hour['windSpeed']
        windgust = hour['windGust']
        precip_probablity = hour['precipProbability']

        temperature = f'{temperature:0.1f}'.rjust(5)
        summary = f'{summary}'.ljust(25)
        windspeed = f'{windspeed:0.1f}'.rjust(4)
        windgust = f'{windgust:0.1f}'.rjust(5)
        precip_probablity = f'{int(precip_probablity*100):}%'.rjust(4)

        # Set the colors for the output
        time_color = Fore.WHITE
        sumary_color = Fore.CYAN
        temperature_color = Fore.GREEN
        windspeed_color = Fore.MAGENTA
        precip_color = Fore.YELLOW


        output = (
            f"\u2502 {time_color}{time_out} {header_color}\u2502"
            f" {sumary_color}{summary} {header_color}\u2502"
            f" {temperature_color}{temperature} F {header_color}\u2502"
            f" {windspeed_color}{windspeed} (Gusting {windgust}) MPH"
            f" {header_color}\u2502"
            f" {precip_color}{precip_probablity}{header_color}"
            f"   \u2502"
        )

        if newday.search(f'{time}') and i > 1:
            print(middle_border)

        print(output)

    print(header_color, end='')
    print(footer_border, end='')
    print(Style.RESET_ALL)


def run_loop(config, location, extended=False):
    """Run every 60 seconds."""

    while True:
        data = load_data(config, location)
        os.system("clear")
        print_hourly(data, extended)
        sleep(60)


def generate_config(config_filename=None):
    """Generate config file."""

    # TODO: error checking
    if config_filename is None:
        config_filename = os.environ['HOME'] + "/.weatherrc"

    latitude = input("Location Latitude: ")
    longitude = input("Location Longitude: ")
    api_key = input("API Key from darksky.net: ")
    config = configparser.ConfigParser()

    config['default'] = {
        'latitude': latitude,
        'longitude': longitude,
        'api_key': api_key
    }
    with open(config_filename, 'w') as fd:
        config.write(fd)

def print_daily(data):
    """Print Daily Weather."""

    daily = data['daily']
    summary = daily['summary']

    print("")
    print(f"  Summary: {summary}")
    print("")

    header_color = Fore.WHITE

    header = ("\u2502  Date " + " " * 4 + "\u2502"
              " Summary " + " " * 23 + "\u2502"
              " Temp " + " " * 9 + "\u2502"
              " Winds "+ " " * 16 + "\u2502"
              " Precip \u2502")

    top_border = "\u250c"
    top_border += "\u2500" * 11 + "\u252c"
    top_border += "\u2500" * 32 + "\u252c"
    top_border += "\u2500" * 15 + "\u252c"
    top_border += "\u2500" * 23 + "\u252c"
    top_border += "\u2500" * 8
    top_border += "\u2510"

    header_border = "\u255e"
    header_border += "\u2550" * 11 + "\u256a"
    header_border += "\u2550" * 32 + "\u256a"
    header_border += "\u2550" * 15 + "\u256a"
    header_border += "\u2550" * 23 + "\u256a"
    header_border += "\u2550" * 8
    header_border += "\u2561"

    middle_border = "\u251c"
    middle_border += "\u2500" * 11 + "\u253c"
    middle_border += "\u2500" * 32 + "\u253c"
    middle_border += "\u2500" * 15 + "\u253c"
    middle_border += "\u2500" * 23 + "\u253c"
    middle_border += "\u2500" * 8
    middle_border += "\u2524"

    footer_border = "\u2514"
    footer_border += "\u2500" * 11 + "\u2534"
    footer_border += "\u2500" * 32 + "\u2534"
    footer_border += "\u2500" * 15 + "\u2534"
    footer_border += "\u2500" * 23 + "\u2534"
    footer_border += "\u2500" * 8
    footer_border += "\u2518"

    print(header_color, end='')
    print(top_border)
    print(header)
    print(header_border)

    summary_wrapper = TextWrapper()
    summary_wrapper.width = 30

    line_spacer = (
        f"\u2502" + " " * 11 + f"{header_color}\u2502"
        " " + " " * 30 + f" {header_color}\u2502"
        " " + " " * 13 + f" {header_color}\u2502"
        " " + " " * 21 + f" {header_color}\u2502"
        " " + " " * 3 + f" {header_color}"
        "   \u2502"
    )

    first = True
    day_divider = False
    for day in daily['data']:

        if first is True:
            first = False
        else:
            if day_divider is True:
                print(middle_border)

        print(line_spacer)

        time = datetime.datetime.fromtimestamp(day['time'])
        summary = day['summary']
        temperature_low = day['temperatureLow']
        temperature_high = day['temperatureHigh']
        windspeed = day['windSpeed']
        windgust = day['windGust']
        precip_probablity = day['precipProbability']
        weekday = calendar.day_abbr[time.weekday()]

        time = f"{time}".split(" ")[0][5:]
        temperature_low = f'{temperature_low:0.1f}'.rjust(5)
        temperature_high = f'{temperature_high:0.1f}'.rjust(5)
        summary = summary_wrapper.wrap(summary)
        windspeed = f'{windspeed:0.1f}'.rjust(4)
        windgust = f'{windgust:0.1f}'.rjust(5)
        precip_probablity = f'{int(precip_probablity*100):}%'.rjust(4)

        # Set the colors for the output
        time_color = Fore.WHITE
        sumary_color = Fore.CYAN
        temperature_color = Fore.GREEN
        windspeed_color = Fore.MAGENTA
        precip_color = Fore.YELLOW

        summary_init = summary[0]
        summary_init = f'{summary_init}'.ljust(30)

        output = (
            f"\u2502 {time_color}{time} {weekday} {header_color}\u2502"
            f" {sumary_color}{summary_init} {header_color}\u2502"
            f" {temperature_color}{temperature_low}/{temperature_high} F {header_color}\u2502"
            f" {windspeed_color}{windspeed} (Gusts{windgust}) MPH"
            f" {header_color}\u2502"
            f" {precip_color}{precip_probablity}{header_color}"
            f"   \u2502"
        )

        print(output)

        if len(summary) > 1:
            for i, line in enumerate(summary):
                if i == 0:
                    continue

                summary_next = line
                summary_next = f'{summary_next}'.ljust(30)

                output = (
                    f"\u2502" + " " * 11 + f"{header_color}\u2502"
                    f" {sumary_color}{summary_next} {header_color}\u2502"
                    " " + " " * 13 + f" {header_color}\u2502"
                    " " + " " * 21 + f" {header_color}\u2502"
                    " " + " " * 3 + f" {header_color}"
                    f"   \u2502"
                )
                print(output)

    print(line_spacer)
    print(header_color, end='')
    print(footer_border, end='')
    print(Style.RESET_ALL)
    print("")


def vintage_out(data):
    """Print Daily Weather Oldschool..."""

    daily = data['daily']
    summary = daily['summary']

    slow_print("")
    slow_print(f"  Summary: {summary}")
    slow_print("")


    for day in daily['data']:

        time = datetime.datetime.fromtimestamp(day['time'])
        summary = day['summary']
        temperature_low = day['temperatureLow']
        temperature_high = day['temperatureHigh']
        windspeed = day['windSpeed']
        windgust = day['windGust']
        precip_probablity = day['precipProbability']
        weekday = calendar.day_abbr[time.weekday()]

        time = f"{time}".split(" ")[0][5:]
        temperature_low = f'{temperature_low:0.1f}'.rjust(5)
        temperature_high = f'{temperature_high:0.1f}'.rjust(5)
        windspeed = f'{windspeed:0.1f}'.rjust(4)
        windgust = f'{windgust:0.1f}'.rjust(5)
        precip_probablity = f'{int(precip_probablity*100):}%'.rjust(4)

        summary_init = summary[0]
        summary_init = f'{summary_init}'.ljust(30)

        output = (
            f" {time} {weekday}\n"
            f" {summary}\n"
            f"   Temp: {temperature_low}/{temperature_high} F \n"
            f"   Wind: {windspeed} (Gusts{windgust}) MPH \n"
            f"   Precipitation: {precip_probablity} \n\n"
        )

        slow_print(output)


@click.command()
@click.option("-d", "--debug", is_flag=True, default=False,
              help="Show debugging info")
@click.option("-c", "--config", default=None,
              help="Set configuration file")
@click.option("-l", "--loop", is_flag=True, default=False,
              help="Run every 60 seconds")
@click.option("-g", "--generate", is_flag=True, default=False,
              help="Generate config file")
@click.option("-e", "--extended", is_flag=True, default=False,
              help="Extended output")
@click.option("--daily", is_flag=True, default=False,
              help="Show daily weather")
@click.option("-s", "--slow", is_flag=True, default=False,
              help="Print out slow like a tele-type")
@click.option("-o", "--location", default=None,
              help="Use Alternate Location")
def main(debug, config, loop, generate, extended, daily, slow, location):
    """Show weather information."""

    try:
        if debug is True:
            logging.basicConfig(level=logging.DEBUG)


        if loop is True:
            run_loop(config, location, extended)
        elif generate is True:
            generate_config(config)
        elif daily is True:
            data = load_data(config, location)
            print_daily(data)
        elif slow is True:
            data = load_data(config, location)
            vintage_out(data)
        else:
            data = load_data(config, location)
            print_hourly(data, extended)
    except KeyboardInterrupt:
        print("Done!")


if __name__ == "__main__":
    main()
